{"version":3,"file":"index.js","sources":["../src/gridjs-vue.vue","../src/index.js"],"sourcesContent":["<template>\r\n  <article :id=\"`gridjs__${uuid}`\" :data-uuid=\"uuid\" :class=\"`gridjs__wrapper`\"></article>\r\n</template>\r\n\r\n<script>\r\nimport { Grid } from 'gridjs'\r\nimport { nanoid } from 'nanoid'\r\nimport elementReady from 'element-ready'\r\n\r\nimport themeMermaid from 'gridjs/dist/theme/mermaid.css'\r\n\r\nexport default {\r\n  name: 'Grid',\r\n  props: {\r\n    autoWidth: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    classNames: {\r\n      type: Object,\r\n      default: undefined\r\n    },\r\n    cols: {\r\n      type: [Array, Function],\r\n      default: undefined\r\n    },\r\n    from: {\r\n      type: [String, Function],\r\n      default: undefined\r\n    },\r\n    language: {\r\n      type: Object,\r\n      default: undefined\r\n    },\r\n    pagination: {\r\n      type: [Object, Boolean],\r\n      default: false\r\n    },\r\n    rows: {\r\n      type: [Array, Function],\r\n      default: undefined\r\n    },\r\n    search: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    server: {\r\n      type: [Object, Function],\r\n      default: undefined\r\n    },\r\n    sort: {\r\n      type: [Object, Boolean],\r\n      default: false\r\n    },\r\n    styles: {\r\n      type: Object,\r\n      default: undefined\r\n    },\r\n    theme: {\r\n      type: String,\r\n      default: 'mermaid'\r\n    },\r\n    width: {\r\n      type: String,\r\n      default: '100%'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dict: {\r\n        error: {\r\n          columnsUndefined: 'Column headers are undefined',\r\n          rowsUndefined: 'No data to display'\r\n        }\r\n      },\r\n      grid: null,\r\n      uuid: null,\r\n      wrapper: null,\r\n      themes: {\r\n        mermaid: themeMermaid\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    options() {\r\n      let options = {\r\n        autoWidth: this.autoWidth,\r\n        columns: this.cols ? this.cols : [this.dict.error.columnsUndefined],\r\n        data: this.rows ? this.rows : this.from || this.server ? undefined : [[this.dict.error.rowsUndefined]],\r\n        pagination: this.pagination,\r\n        sort: this.sort,\r\n        width: this.width\r\n      }\r\n\r\n      // let classNames\r\n\r\n      if (this.classNames) options.className = this.classNames\r\n      if (this.from)\r\n        options.from =\r\n          typeof this.from === 'string'\r\n            ? document.querySelector(this.from)\r\n            : document.createRange().createContextualFragment(this.from())\r\n      if (this.language) options.language = this.language\r\n      if (this.search) options.search = this.search\r\n      if (this.server) options.server = this.server\r\n      if (this.styles) options.style = this.styles\r\n\r\n      return options\r\n    }\r\n  },\r\n  watch: {\r\n    autoWidth() {\r\n      this.update()\r\n    },\r\n    classNames() {\r\n      this.update()\r\n    },\r\n    cols() {\r\n      this.update()\r\n    },\r\n    from() {\r\n      this.update()\r\n    },\r\n    language() {\r\n      this.update()\r\n    },\r\n    pagination() {\r\n      this.update()\r\n    },\r\n    rows() {\r\n      this.update()\r\n    },\r\n    search() {\r\n      this.update()\r\n    },\r\n    server() {\r\n      this.update()\r\n    },\r\n    sort() {\r\n      this.update()\r\n    },\r\n    styles() {\r\n      this.update()\r\n    },\r\n    width() {\r\n      this.update()\r\n    }\r\n  },\r\n  async mounted() {\r\n    // give table a unique id\r\n    this.uuid = nanoid()\r\n\r\n    // select the unique wrapper element\r\n    this.wrapper = await elementReady(`[data-uuid=\"${this.uuid}\"]`, { stopOnDomReady: false })\r\n\r\n    // assign styles\r\n    if (this.theme !== 'none') await this.assignTheme()\r\n\r\n    // instantiate grid.js\r\n    if (this.wrapper && (this.options.data || this.options.from || this.options.server)) {\r\n      this.grid = new Grid(this.options).render(this.wrapper)\r\n\t  this.grid.on('rowClick', (...args) => {this.$emit('grid-row-click', args)})\r\n      this.grid.on('cellClick', (...args) => {this.$emit('grid-cell-click', args)})\r\n      this.grid.on('ready', (...args) => {this.$emit('grid-ready', args)})\r\n      this.grid.on('beforeLoad', (...args) => {this.$emit('grid-before-load', args)})\r\n      this.grid.on('load', (...args) => {this.$emit('grid-load', args)})\r\n    }\r\n  },\r\n  destroyed() {\r\n    // unload from memory\r\n    this.grid = undefined\r\n    this.wrapper = undefined\r\n  },\r\n  methods: {\r\n    async assignTheme() {\r\n      const head = document.getElementsByTagName('head')[0]\r\n      const id = `gridjs__${this.uuid}`\r\n\r\n      let stylesheet = document.createRange().createContextualFragment(`\r\n        <style title=\"${id}_theme\" type=\"text/css\">\r\n          ${this.themes[this.theme]}\r\n        </style>\r\n      `)\r\n      head.appendChild(stylesheet)\r\n\r\n      for (let index in document.styleSheets) {\r\n        if (document.styleSheets[index].title === `${id}_theme`) stylesheet = document.styleSheets[index]\r\n      }\r\n\r\n      if (stylesheet instanceof CSSStyleSheet) {\r\n        for (const index in stylesheet.cssRules) {\r\n          let css = stylesheet.cssRules[index].cssText\r\n          if (css && !/@/g.test(css)) {\r\n            const rule = `#${id} ${css}`\r\n            stylesheet.deleteRule(index)\r\n            stylesheet.insertRule(rule, index)\r\n          }\r\n        }\r\n      }\r\n    },\r\n    update() {\r\n      if (this.grid) this.grid.updateConfig(this.options).forceRender()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.gridjs__wrapper {\r\n  align-items: center;\r\n  display: flex;\r\n  height: fit-content;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { createRef, h, html } from 'gridjs'\r\nimport elementReady from 'element-ready'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport Grid from './gridjs-vue.vue'\r\n\r\nexport function install(Vue) {\r\n  if (install.installed) return\r\n  install.installed = true\r\n\r\n  const render = (el, usrComponent, props, opts) => {\r\n    if (el && el.current) el = el.current\r\n\r\n    if (typeof el === 'string' && usrComponent) {\r\n      return elementReady(el, { stopOnDomReady: false })\r\n        .then(() => {\r\n          new Vue({\r\n            render(createElement) {\r\n              return createElement(usrComponent, { props, ...opts }, this.$slots.default)\r\n            },\r\n            components: {\r\n              usrComponent\r\n            }\r\n          }).$mount(el)\r\n        })\r\n        .catch(err => {\r\n          console.error(err)\r\n        })\r\n    } else {\r\n      console.error('$gridjs.render() requires a target element and a component')\r\n      return\r\n    }\r\n  }\r\n\r\n  if (!Vue.prototype.$gridjs) {\r\n    Vue.prototype.$gridjs = {\r\n      createRef,\r\n      h,\r\n      html,\r\n      render,\r\n      uuid: nanoid\r\n    }\r\n  }\r\n\r\n  Vue.component('Grid', Grid)\r\n}\r\n\r\nconst plugin = {\r\n  install\r\n}\r\n\r\nlet GlobalVue = null\r\n\r\nif (typeof window !== 'undefined') {\r\n  GlobalVue = window.Vue\r\n} else if (typeof global !== 'undefined') {\r\n  GlobalVue = global.Vue\r\n}\r\n\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin)\r\n}\r\n\r\nexport { Grid, plugin as GridGlobal }\r\nexport default Grid\r\n"],"names":["install","Vue","installed","prototype","$gridjs","createRef","h","html","render","el","usrComponent","props","opts","current","elementReady","stopOnDomReady","then","createElement","this","$slots","default","components","$mount","catch","err","console","error","uuid","nanoid","component","Grid","plugin","GlobalVue","window","global","use"],"mappings":"+uBAWA,6hICLO,SAASA,EAAQC,OAClBD,EAAQE,WACZF,EAAQE,WAAY,EA0BfD,EAAIE,UAAUC,UACjBH,EAAIE,UAAUC,QAAU,CACtBC,UAAAA,YACAC,EAAAA,IACAC,KAAAA,OACAC,OA7BW,SAACC,EAAIC,EAAcC,EAAOC,UACnCH,GAAMA,EAAGI,UAASJ,EAAKA,EAAGI,SAEZ,iBAAPJ,GAAmBC,EACrBI,EAAaL,EAAI,CAAEM,gBAAgB,IACvCC,MAAK,eACAf,EAAI,CACNO,gBAAOS,UACEA,EAAcP,iBAAgBC,MAAAA,GAAUC,GAAQM,KAAKC,OAAOC,UAErEC,WAAY,CACVX,aAAAA,KAEDY,OAAOb,MAEXc,OAAM,SAAAC,GACLC,QAAQC,MAAMF,WAGlBC,QAAQC,MAAM,+DAWdC,KAAMC,WAIV3B,EAAI4B,UAAU,OAAQC,IAGxB,IAAMC,EAAS,CACb/B,QAAAA,GAGEgC,EAAY,KAEM,oBAAXC,OACTD,EAAYC,OAAOhC,IACQ,oBAAXiC,SAChBF,EAAYE,OAAOjC,KAGjB+B,GACFA,EAAUG,IAAIJ"}